// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id    Int    @id @default(autoincrement())
  name  String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservations Reservation[]
}

model Table {
  id          Int      @id @default(autoincrement())
  number      Int      @unique // Unique table number
  capacity    Int      // Number of seats
  isAvailable Boolean  @default(true) // Whether the table is available for reservation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reservations Reservation[]
}

model RestaurantHours {
  id        Int      @id @default(autoincrement())
  day       String   // E.g., 'Monday', 'Tuesday', etc.
  openTime  String // Restaurant opening time (stored as time)
  closeTime String // Restaurant closing time (stored as time)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id             Int       @id @default(autoincrement())
  reservedAt     DateTime // reservation date, start date time
  reservedEnd    DateTime // reservation date finish, end date time
  status         Boolean   @default(false) // Whether the Reservation is finish
  customerId     Int
  tableId        Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  table    Table    @relation(fields: [tableId], references: [id])

  @@unique([reservedAt, tableId]) // Prevent table double booking
}